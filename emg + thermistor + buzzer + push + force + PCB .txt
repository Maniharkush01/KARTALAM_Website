#include <Arduino.h>
#include <Servo.h>

// Pin definitions
#define EMG_INPUT_PIN A0
#define THERMISTOR_PIN A2
#define FORCE_SENSOR_PIN A1
#define SERVO_PIN 8
#define BUZZER_PIN 2
#define BUTTON_PIN 9

// Constants
#define SAMPLE_RATE 500
#define BAUD_RATE 115200
#define BUFFER_SIZE 64
#define EMG_THRESHOLD 47
#define SERVO_OPEN 0
#define SERVO_CLOSE 180
#define TEMP_THRESHOLD 27
#define FORCE_THRESHOLD 500 // Adjust this value based on your force sensor's readings

// Variables
int circular_buffer[BUFFER_SIZE];
int data_index = 0, sum = 0;
Servo servo;

// Thermistor constants
const float R1 = 10000;
const float c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;

void setup() {
  Serial.begin(BAUD_RATE);
  servo.attach(SERVO_PIN);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT);
}

void loop() {
  // EMG processing
  static unsigned long past = 0;
  unsigned long present = micros();
  unsigned long interval = present - past;
  past = present;
  static long timer = 0;
  timer -= interval;

  if(timer < 0) {
    timer += 1000000 / SAMPLE_RATE;
    int sensor_value = analogRead(EMG_INPUT_PIN);
    int signal = EMGFilter(sensor_value);
    int envelope = getEnvelope(abs(signal));

    if (envelope > EMG_THRESHOLD) {
      servo.write(SERVO_CLOSE);
    } else {
      if (digitalRead(BUTTON_PIN) == HIGH) {
        servo.write(SERVO_OPEN);
      } else {
        servo.write(SERVO_CLOSE);
      }
    }

    Serial.print(signal);
    Serial.print(",");
    Serial.println(envelope);
  }

  // Thermistor reading
  int Vo = analogRead(THERMISTOR_PIN);
  float R2 = R1 * (1023.0 / (float)Vo - 1.0);
  float logR2 = log(R2);
  float T = (1.0 / (c1 + c2 * logR2 + c3 * logR2 * logR2 * logR2));
  float Tc = T - 273.15;
  float Tf = (Tc * 9.0) / 5.0 + 32.0;

  Serial.print("Thermistor Temperature: ");
  Serial.print(Tc);
  Serial.println(" C");

  // Force sensor reading
  int forceReading = analogRead(FORCE_SENSOR_PIN);
  Serial.print("Force Sensor Reading: ");
  Serial.println(forceReading);

  // Buzzer control based on temperature and force thresholds
  if (Tc >= TEMP_THRESHOLD || forceReading > FORCE_THRESHOLD) {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(1000);
  } else {
    digitalWrite(BUZZER_PIN, LOW);
  }

  delay(500);
}

// Envelope detection function
int getEnvelope(int abs_emg) {
  sum -= circular_buffer[data_index];
  sum += abs_emg;
  circular_buffer[data_index] = abs_emg;
  data_index = (data_index + 1) % BUFFER_SIZE;
  return (sum / BUFFER_SIZE) * 2;
}

// EMG filter function
float EMGFilter(float input) {
  float output = input;

  static float z1, z2; // filter section state
  float x = output - 0.05159732 * z1 - 0.36347401 * z2;
  output = 0.01856301 * x + 0.03712602 * z1 + 0.01856301 * z2;
  z2 = z1;
  z1 = x;

  static float z3, z4; // filter section state
  x = output - -0.53945795 * z3 - 0.39764934 * z4;
  output = 1.00000000 * x + -2.00000000 * z3 + 1.00000000 * z4;
  z4 = z3;
  z3 = x;

  static float z5, z6; // filter section state
  x = output - 0.47319594 * z5 - 0.70744137 * z6;
  output = 1.00000000 * x + 2.00000000 * z5 + 1.00000000 * z6;
  z6 = z5;
  z5 = x;

  static float z7, z8; // filter section state
  x = output - -1.00211112 * z7 - 0.74520226 * z8;
  output = 1.00000000 * x + -2.00000000 * z7 + 1.00000000 * z8;
  z8 = z7;
  z7 = x;

  returnÂ output;
}